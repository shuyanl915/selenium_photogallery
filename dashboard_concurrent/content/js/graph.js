/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 282.0, "minX": 0.0, "maxY": 144864.0, "series": [{"data": [[0.0, 282.0], [0.1, 513.0], [0.2, 634.0], [0.3, 687.0], [0.4, 748.0], [0.5, 782.0], [0.6, 827.0], [0.7, 843.0], [0.8, 880.0], [0.9, 902.0], [1.0, 924.0], [1.1, 960.0], [1.2, 1006.0], [1.3, 1043.0], [1.4, 1063.0], [1.5, 1083.0], [1.6, 1110.0], [1.7, 1144.0], [1.8, 1167.0], [1.9, 1198.0], [2.0, 1216.0], [2.1, 1226.0], [2.2, 1253.0], [2.3, 1261.0], [2.4, 1274.0], [2.5, 1296.0], [2.6, 1319.0], [2.7, 1341.0], [2.8, 1374.0], [2.9, 1393.0], [3.0, 1410.0], [3.1, 1429.0], [3.2, 1455.0], [3.3, 1478.0], [3.4, 1492.0], [3.5, 1510.0], [3.6, 1533.0], [3.7, 1551.0], [3.8, 1566.0], [3.9, 1578.0], [4.0, 1612.0], [4.1, 1623.0], [4.2, 1638.0], [4.3, 1645.0], [4.4, 1660.0], [4.5, 1674.0], [4.6, 1686.0], [4.7, 1707.0], [4.8, 1722.0], [4.9, 1739.0], [5.0, 1746.0], [5.1, 1761.0], [5.2, 1769.0], [5.3, 1779.0], [5.4, 1793.0], [5.5, 1803.0], [5.6, 1817.0], [5.7, 1833.0], [5.8, 1851.0], [5.9, 1864.0], [6.0, 1885.0], [6.1, 1899.0], [6.2, 1909.0], [6.3, 1922.0], [6.4, 1930.0], [6.5, 1950.0], [6.6, 1965.0], [6.7, 1986.0], [6.8, 1996.0], [6.9, 2003.0], [7.0, 2020.0], [7.1, 2031.0], [7.2, 2043.0], [7.3, 2052.0], [7.4, 2064.0], [7.5, 2080.0], [7.6, 2092.0], [7.7, 2103.0], [7.8, 2116.0], [7.9, 2123.0], [8.0, 2135.0], [8.1, 2143.0], [8.2, 2155.0], [8.3, 2171.0], [8.4, 2177.0], [8.5, 2184.0], [8.6, 2192.0], [8.7, 2204.0], [8.8, 2215.0], [8.9, 2226.0], [9.0, 2233.0], [9.1, 2240.0], [9.2, 2250.0], [9.3, 2260.0], [9.4, 2278.0], [9.5, 2286.0], [9.6, 2297.0], [9.7, 2307.0], [9.8, 2312.0], [9.9, 2325.0], [10.0, 2334.0], [10.1, 2351.0], [10.2, 2356.0], [10.3, 2359.0], [10.4, 2368.0], [10.5, 2379.0], [10.6, 2391.0], [10.7, 2396.0], [10.8, 2404.0], [10.9, 2413.0], [11.0, 2418.0], [11.1, 2428.0], [11.2, 2438.0], [11.3, 2446.0], [11.4, 2462.0], [11.5, 2467.0], [11.6, 2475.0], [11.7, 2484.0], [11.8, 2493.0], [11.9, 2498.0], [12.0, 2505.0], [12.1, 2509.0], [12.2, 2519.0], [12.3, 2526.0], [12.4, 2534.0], [12.5, 2539.0], [12.6, 2544.0], [12.7, 2550.0], [12.8, 2557.0], [12.9, 2562.0], [13.0, 2568.0], [13.1, 2572.0], [13.2, 2581.0], [13.3, 2588.0], [13.4, 2591.0], [13.5, 2596.0], [13.6, 2603.0], [13.7, 2608.0], [13.8, 2618.0], [13.9, 2623.0], [14.0, 2631.0], [14.1, 2637.0], [14.2, 2643.0], [14.3, 2651.0], [14.4, 2655.0], [14.5, 2661.0], [14.6, 2668.0], [14.7, 2673.0], [14.8, 2680.0], [14.9, 2689.0], [15.0, 2694.0], [15.1, 2702.0], [15.2, 2712.0], [15.3, 2720.0], [15.4, 2731.0], [15.5, 2737.0], [15.6, 2741.0], [15.7, 2748.0], [15.8, 2755.0], [15.9, 2758.0], [16.0, 2763.0], [16.1, 2772.0], [16.2, 2781.0], [16.3, 2787.0], [16.4, 2795.0], [16.5, 2804.0], [16.6, 2812.0], [16.7, 2822.0], [16.8, 2830.0], [16.9, 2835.0], [17.0, 2845.0], [17.1, 2851.0], [17.2, 2855.0], [17.3, 2859.0], [17.4, 2864.0], [17.5, 2875.0], [17.6, 2881.0], [17.7, 2889.0], [17.8, 2895.0], [17.9, 2899.0], [18.0, 2904.0], [18.1, 2912.0], [18.2, 2917.0], [18.3, 2924.0], [18.4, 2928.0], [18.5, 2935.0], [18.6, 2940.0], [18.7, 2952.0], [18.8, 2957.0], [18.9, 2963.0], [19.0, 2971.0], [19.1, 2976.0], [19.2, 2981.0], [19.3, 2987.0], [19.4, 2992.0], [19.5, 3001.0], [19.6, 3008.0], [19.7, 3014.0], [19.8, 3019.0], [19.9, 3022.0], [20.0, 3031.0], [20.1, 3033.0], [20.2, 3038.0], [20.3, 3042.0], [20.4, 3050.0], [20.5, 3055.0], [20.6, 3064.0], [20.7, 3068.0], [20.8, 3073.0], [20.9, 3078.0], [21.0, 3083.0], [21.1, 3090.0], [21.2, 3097.0], [21.3, 3102.0], [21.4, 3104.0], [21.5, 3111.0], [21.6, 3116.0], [21.7, 3119.0], [21.8, 3124.0], [21.9, 3131.0], [22.0, 3135.0], [22.1, 3141.0], [22.2, 3147.0], [22.3, 3154.0], [22.4, 3166.0], [22.5, 3169.0], [22.6, 3175.0], [22.7, 3178.0], [22.8, 3185.0], [22.9, 3188.0], [23.0, 3194.0], [23.1, 3201.0], [23.2, 3207.0], [23.3, 3217.0], [23.4, 3222.0], [23.5, 3229.0], [23.6, 3235.0], [23.7, 3241.0], [23.8, 3249.0], [23.9, 3256.0], [24.0, 3260.0], [24.1, 3267.0], [24.2, 3273.0], [24.3, 3279.0], [24.4, 3285.0], [24.5, 3289.0], [24.6, 3293.0], [24.7, 3298.0], [24.8, 3303.0], [24.9, 3308.0], [25.0, 3313.0], [25.1, 3318.0], [25.2, 3324.0], [25.3, 3327.0], [25.4, 3331.0], [25.5, 3335.0], [25.6, 3344.0], [25.7, 3349.0], [25.8, 3354.0], [25.9, 3362.0], [26.0, 3369.0], [26.1, 3374.0], [26.2, 3381.0], [26.3, 3388.0], [26.4, 3394.0], [26.5, 3399.0], [26.6, 3406.0], [26.7, 3410.0], [26.8, 3416.0], [26.9, 3422.0], [27.0, 3429.0], [27.1, 3433.0], [27.2, 3443.0], [27.3, 3448.0], [27.4, 3454.0], [27.5, 3462.0], [27.6, 3469.0], [27.7, 3474.0], [27.8, 3479.0], [27.9, 3486.0], [28.0, 3492.0], [28.1, 3498.0], [28.2, 3501.0], [28.3, 3506.0], [28.4, 3510.0], [28.5, 3517.0], [28.6, 3522.0], [28.7, 3530.0], [28.8, 3536.0], [28.9, 3540.0], [29.0, 3543.0], [29.1, 3550.0], [29.2, 3556.0], [29.3, 3563.0], [29.4, 3574.0], [29.5, 3577.0], [29.6, 3582.0], [29.7, 3589.0], [29.8, 3595.0], [29.9, 3602.0], [30.0, 3608.0], [30.1, 3610.0], [30.2, 3617.0], [30.3, 3623.0], [30.4, 3629.0], [30.5, 3637.0], [30.6, 3645.0], [30.7, 3651.0], [30.8, 3653.0], [30.9, 3660.0], [31.0, 3665.0], [31.1, 3667.0], [31.2, 3672.0], [31.3, 3677.0], [31.4, 3681.0], [31.5, 3687.0], [31.6, 3690.0], [31.7, 3695.0], [31.8, 3701.0], [31.9, 3710.0], [32.0, 3717.0], [32.1, 3720.0], [32.2, 3726.0], [32.3, 3730.0], [32.4, 3733.0], [32.5, 3739.0], [32.6, 3744.0], [32.7, 3749.0], [32.8, 3759.0], [32.9, 3762.0], [33.0, 3766.0], [33.1, 3772.0], [33.2, 3778.0], [33.3, 3781.0], [33.4, 3788.0], [33.5, 3794.0], [33.6, 3801.0], [33.7, 3806.0], [33.8, 3814.0], [33.9, 3818.0], [34.0, 3822.0], [34.1, 3826.0], [34.2, 3832.0], [34.3, 3835.0], [34.4, 3842.0], [34.5, 3848.0], [34.6, 3853.0], [34.7, 3857.0], [34.8, 3864.0], [34.9, 3870.0], [35.0, 3872.0], [35.1, 3877.0], [35.2, 3880.0], [35.3, 3891.0], [35.4, 3895.0], [35.5, 3900.0], [35.6, 3910.0], [35.7, 3913.0], [35.8, 3919.0], [35.9, 3926.0], [36.0, 3930.0], [36.1, 3937.0], [36.2, 3942.0], [36.3, 3946.0], [36.4, 3951.0], [36.5, 3955.0], [36.6, 3963.0], [36.7, 3965.0], [36.8, 3969.0], [36.9, 3975.0], [37.0, 3979.0], [37.1, 3984.0], [37.2, 3988.0], [37.3, 3996.0], [37.4, 3999.0], [37.5, 4003.0], [37.6, 4009.0], [37.7, 4016.0], [37.8, 4019.0], [37.9, 4024.0], [38.0, 4031.0], [38.1, 4034.0], [38.2, 4038.0], [38.3, 4044.0], [38.4, 4055.0], [38.5, 4060.0], [38.6, 4065.0], [38.7, 4068.0], [38.8, 4074.0], [38.9, 4080.0], [39.0, 4089.0], [39.1, 4095.0], [39.2, 4100.0], [39.3, 4106.0], [39.4, 4110.0], [39.5, 4116.0], [39.6, 4122.0], [39.7, 4129.0], [39.8, 4134.0], [39.9, 4137.0], [40.0, 4144.0], [40.1, 4148.0], [40.2, 4156.0], [40.3, 4162.0], [40.4, 4166.0], [40.5, 4170.0], [40.6, 4173.0], [40.7, 4182.0], [40.8, 4184.0], [40.9, 4190.0], [41.0, 4198.0], [41.1, 4206.0], [41.2, 4211.0], [41.3, 4215.0], [41.4, 4223.0], [41.5, 4225.0], [41.6, 4232.0], [41.7, 4237.0], [41.8, 4240.0], [41.9, 4248.0], [42.0, 4253.0], [42.1, 4257.0], [42.2, 4266.0], [42.3, 4272.0], [42.4, 4278.0], [42.5, 4283.0], [42.6, 4287.0], [42.7, 4292.0], [42.8, 4299.0], [42.9, 4302.0], [43.0, 4309.0], [43.1, 4319.0], [43.2, 4324.0], [43.3, 4328.0], [43.4, 4333.0], [43.5, 4338.0], [43.6, 4344.0], [43.7, 4353.0], [43.8, 4361.0], [43.9, 4369.0], [44.0, 4374.0], [44.1, 4379.0], [44.2, 4382.0], [44.3, 4386.0], [44.4, 4389.0], [44.5, 4396.0], [44.6, 4402.0], [44.7, 4407.0], [44.8, 4412.0], [44.9, 4417.0], [45.0, 4421.0], [45.1, 4428.0], [45.2, 4431.0], [45.3, 4439.0], [45.4, 4444.0], [45.5, 4450.0], [45.6, 4457.0], [45.7, 4462.0], [45.8, 4469.0], [45.9, 4475.0], [46.0, 4482.0], [46.1, 4487.0], [46.2, 4493.0], [46.3, 4500.0], [46.4, 4506.0], [46.5, 4511.0], [46.6, 4518.0], [46.7, 4523.0], [46.8, 4528.0], [46.9, 4533.0], [47.0, 4537.0], [47.1, 4544.0], [47.2, 4548.0], [47.3, 4554.0], [47.4, 4562.0], [47.5, 4569.0], [47.6, 4575.0], [47.7, 4583.0], [47.8, 4593.0], [47.9, 4597.0], [48.0, 4605.0], [48.1, 4612.0], [48.2, 4615.0], [48.3, 4621.0], [48.4, 4627.0], [48.5, 4634.0], [48.6, 4636.0], [48.7, 4641.0], [48.8, 4646.0], [48.9, 4652.0], [49.0, 4654.0], [49.1, 4660.0], [49.2, 4665.0], [49.3, 4669.0], [49.4, 4677.0], [49.5, 4682.0], [49.6, 4688.0], [49.7, 4691.0], [49.8, 4699.0], [49.9, 4703.0], [50.0, 4708.0], [50.1, 4715.0], [50.2, 4723.0], [50.3, 4729.0], [50.4, 4736.0], [50.5, 4739.0], [50.6, 4749.0], [50.7, 4754.0], [50.8, 4758.0], [50.9, 4765.0], [51.0, 4772.0], [51.1, 4778.0], [51.2, 4787.0], [51.3, 4791.0], [51.4, 4798.0], [51.5, 4804.0], [51.6, 4811.0], [51.7, 4815.0], [51.8, 4821.0], [51.9, 4831.0], [52.0, 4837.0], [52.1, 4844.0], [52.2, 4850.0], [52.3, 4856.0], [52.4, 4862.0], [52.5, 4869.0], [52.6, 4877.0], [52.7, 4882.0], [52.8, 4887.0], [52.9, 4895.0], [53.0, 4902.0], [53.1, 4908.0], [53.2, 4917.0], [53.3, 4924.0], [53.4, 4930.0], [53.5, 4938.0], [53.6, 4946.0], [53.7, 4953.0], [53.8, 4960.0], [53.9, 4969.0], [54.0, 4972.0], [54.1, 4980.0], [54.2, 4986.0], [54.3, 4991.0], [54.4, 5002.0], [54.5, 5009.0], [54.6, 5013.0], [54.7, 5022.0], [54.8, 5028.0], [54.9, 5036.0], [55.0, 5045.0], [55.1, 5055.0], [55.2, 5062.0], [55.3, 5066.0], [55.4, 5070.0], [55.5, 5076.0], [55.6, 5080.0], [55.7, 5094.0], [55.8, 5100.0], [55.9, 5109.0], [56.0, 5117.0], [56.1, 5121.0], [56.2, 5127.0], [56.3, 5130.0], [56.4, 5134.0], [56.5, 5145.0], [56.6, 5151.0], [56.7, 5157.0], [56.8, 5164.0], [56.9, 5170.0], [57.0, 5176.0], [57.1, 5185.0], [57.2, 5192.0], [57.3, 5199.0], [57.4, 5202.0], [57.5, 5212.0], [57.6, 5218.0], [57.7, 5225.0], [57.8, 5230.0], [57.9, 5238.0], [58.0, 5247.0], [58.1, 5252.0], [58.2, 5258.0], [58.3, 5263.0], [58.4, 5274.0], [58.5, 5285.0], [58.6, 5293.0], [58.7, 5302.0], [58.8, 5307.0], [58.9, 5315.0], [59.0, 5323.0], [59.1, 5331.0], [59.2, 5342.0], [59.3, 5349.0], [59.4, 5357.0], [59.5, 5363.0], [59.6, 5367.0], [59.7, 5375.0], [59.8, 5382.0], [59.9, 5387.0], [60.0, 5393.0], [60.1, 5398.0], [60.2, 5407.0], [60.3, 5413.0], [60.4, 5417.0], [60.5, 5420.0], [60.6, 5425.0], [60.7, 5437.0], [60.8, 5445.0], [60.9, 5452.0], [61.0, 5456.0], [61.1, 5461.0], [61.2, 5467.0], [61.3, 5476.0], [61.4, 5479.0], [61.5, 5484.0], [61.6, 5491.0], [61.7, 5500.0], [61.8, 5504.0], [61.9, 5513.0], [62.0, 5520.0], [62.1, 5527.0], [62.2, 5535.0], [62.3, 5545.0], [62.4, 5554.0], [62.5, 5560.0], [62.6, 5570.0], [62.7, 5574.0], [62.8, 5581.0], [62.9, 5587.0], [63.0, 5596.0], [63.1, 5600.0], [63.2, 5605.0], [63.3, 5614.0], [63.4, 5626.0], [63.5, 5635.0], [63.6, 5641.0], [63.7, 5646.0], [63.8, 5656.0], [63.9, 5661.0], [64.0, 5671.0], [64.1, 5678.0], [64.2, 5688.0], [64.3, 5696.0], [64.4, 5707.0], [64.5, 5719.0], [64.6, 5728.0], [64.7, 5735.0], [64.8, 5740.0], [64.9, 5752.0], [65.0, 5759.0], [65.1, 5767.0], [65.2, 5778.0], [65.3, 5787.0], [65.4, 5796.0], [65.5, 5806.0], [65.6, 5816.0], [65.7, 5824.0], [65.8, 5832.0], [65.9, 5845.0], [66.0, 5854.0], [66.1, 5859.0], [66.2, 5863.0], [66.3, 5869.0], [66.4, 5882.0], [66.5, 5891.0], [66.6, 5899.0], [66.7, 5908.0], [66.8, 5919.0], [66.9, 5926.0], [67.0, 5934.0], [67.1, 5943.0], [67.2, 5950.0], [67.3, 5955.0], [67.4, 5962.0], [67.5, 5969.0], [67.6, 5979.0], [67.7, 5984.0], [67.8, 5993.0], [67.9, 6000.0], [68.0, 6008.0], [68.1, 6015.0], [68.2, 6022.0], [68.3, 6033.0], [68.4, 6041.0], [68.5, 6050.0], [68.6, 6060.0], [68.7, 6076.0], [68.8, 6085.0], [68.9, 6096.0], [69.0, 6105.0], [69.1, 6116.0], [69.2, 6128.0], [69.3, 6138.0], [69.4, 6142.0], [69.5, 6147.0], [69.6, 6163.0], [69.7, 6170.0], [69.8, 6181.0], [69.9, 6188.0], [70.0, 6207.0], [70.1, 6218.0], [70.2, 6228.0], [70.3, 6236.0], [70.4, 6246.0], [70.5, 6256.0], [70.6, 6268.0], [70.7, 6273.0], [70.8, 6284.0], [70.9, 6297.0], [71.0, 6303.0], [71.1, 6312.0], [71.2, 6325.0], [71.3, 6344.0], [71.4, 6354.0], [71.5, 6364.0], [71.6, 6371.0], [71.7, 6379.0], [71.8, 6389.0], [71.9, 6405.0], [72.0, 6416.0], [72.1, 6428.0], [72.2, 6443.0], [72.3, 6453.0], [72.4, 6461.0], [72.5, 6470.0], [72.6, 6484.0], [72.7, 6493.0], [72.8, 6503.0], [72.9, 6514.0], [73.0, 6531.0], [73.1, 6540.0], [73.2, 6558.0], [73.3, 6566.0], [73.4, 6576.0], [73.5, 6587.0], [73.6, 6602.0], [73.7, 6612.0], [73.8, 6625.0], [73.9, 6641.0], [74.0, 6656.0], [74.1, 6665.0], [74.2, 6675.0], [74.3, 6682.0], [74.4, 6700.0], [74.5, 6709.0], [74.6, 6725.0], [74.7, 6740.0], [74.8, 6748.0], [74.9, 6768.0], [75.0, 6778.0], [75.1, 6788.0], [75.2, 6795.0], [75.3, 6810.0], [75.4, 6816.0], [75.5, 6828.0], [75.6, 6839.0], [75.7, 6854.0], [75.8, 6864.0], [75.9, 6884.0], [76.0, 6897.0], [76.1, 6906.0], [76.2, 6922.0], [76.3, 6934.0], [76.4, 6946.0], [76.5, 6955.0], [76.6, 6965.0], [76.7, 6981.0], [76.8, 6990.0], [76.9, 7006.0], [77.0, 7020.0], [77.1, 7030.0], [77.2, 7046.0], [77.3, 7060.0], [77.4, 7069.0], [77.5, 7084.0], [77.6, 7097.0], [77.7, 7114.0], [77.8, 7123.0], [77.9, 7138.0], [78.0, 7168.0], [78.1, 7186.0], [78.2, 7203.0], [78.3, 7217.0], [78.4, 7239.0], [78.5, 7254.0], [78.6, 7266.0], [78.7, 7283.0], [78.8, 7293.0], [78.9, 7314.0], [79.0, 7328.0], [79.1, 7349.0], [79.2, 7361.0], [79.3, 7381.0], [79.4, 7400.0], [79.5, 7423.0], [79.6, 7443.0], [79.7, 7467.0], [79.8, 7482.0], [79.9, 7503.0], [80.0, 7515.0], [80.1, 7530.0], [80.2, 7548.0], [80.3, 7557.0], [80.4, 7586.0], [80.5, 7596.0], [80.6, 7611.0], [80.7, 7626.0], [80.8, 7652.0], [80.9, 7672.0], [81.0, 7685.0], [81.1, 7703.0], [81.2, 7715.0], [81.3, 7734.0], [81.4, 7757.0], [81.5, 7782.0], [81.6, 7797.0], [81.7, 7812.0], [81.8, 7834.0], [81.9, 7847.0], [82.0, 7866.0], [82.1, 7879.0], [82.2, 7898.0], [82.3, 7916.0], [82.4, 7934.0], [82.5, 7958.0], [82.6, 7989.0], [82.7, 8011.0], [82.8, 8020.0], [82.9, 8039.0], [83.0, 8051.0], [83.1, 8069.0], [83.2, 8095.0], [83.3, 8115.0], [83.4, 8131.0], [83.5, 8153.0], [83.6, 8176.0], [83.7, 8202.0], [83.8, 8228.0], [83.9, 8252.0], [84.0, 8278.0], [84.1, 8300.0], [84.2, 8325.0], [84.3, 8341.0], [84.4, 8368.0], [84.5, 8396.0], [84.6, 8412.0], [84.7, 8437.0], [84.8, 8475.0], [84.9, 8500.0], [85.0, 8516.0], [85.1, 8539.0], [85.2, 8568.0], [85.3, 8581.0], [85.4, 8598.0], [85.5, 8625.0], [85.6, 8647.0], [85.7, 8667.0], [85.8, 8691.0], [85.9, 8720.0], [86.0, 8740.0], [86.1, 8760.0], [86.2, 8776.0], [86.3, 8805.0], [86.4, 8829.0], [86.5, 8866.0], [86.6, 8884.0], [86.7, 8924.0], [86.8, 8941.0], [86.9, 8959.0], [87.0, 8999.0], [87.1, 9024.0], [87.2, 9042.0], [87.3, 9074.0], [87.4, 9098.0], [87.5, 9125.0], [87.6, 9146.0], [87.7, 9168.0], [87.8, 9197.0], [87.9, 9227.0], [88.0, 9256.0], [88.1, 9278.0], [88.2, 9311.0], [88.3, 9336.0], [88.4, 9377.0], [88.5, 9414.0], [88.6, 9440.0], [88.7, 9474.0], [88.8, 9497.0], [88.9, 9535.0], [89.0, 9563.0], [89.1, 9628.0], [89.2, 9655.0], [89.3, 9684.0], [89.4, 9706.0], [89.5, 9735.0], [89.6, 9801.0], [89.7, 9837.0], [89.8, 9869.0], [89.9, 9889.0], [90.0, 9926.0], [90.1, 9966.0], [90.2, 9990.0], [90.3, 10028.0], [90.4, 10070.0], [90.5, 10087.0], [90.6, 10165.0], [90.7, 10222.0], [90.8, 10241.0], [90.9, 10280.0], [91.0, 10306.0], [91.1, 10349.0], [91.2, 10406.0], [91.3, 10447.0], [91.4, 10502.0], [91.5, 10582.0], [91.6, 10662.0], [91.7, 10722.0], [91.8, 10755.0], [91.9, 10790.0], [92.0, 10874.0], [92.1, 10917.0], [92.2, 10938.0], [92.3, 11020.0], [92.4, 11062.0], [92.5, 11085.0], [92.6, 11152.0], [92.7, 11232.0], [92.8, 11306.0], [92.9, 11367.0], [93.0, 11438.0], [93.1, 11480.0], [93.2, 11580.0], [93.3, 11638.0], [93.4, 11757.0], [93.5, 11855.0], [93.6, 11901.0], [93.7, 11977.0], [93.8, 12024.0], [93.9, 12093.0], [94.0, 12171.0], [94.1, 12267.0], [94.2, 12328.0], [94.3, 12389.0], [94.4, 12443.0], [94.5, 12512.0], [94.6, 12583.0], [94.7, 12654.0], [94.8, 12760.0], [94.9, 12815.0], [95.0, 12908.0], [95.1, 12978.0], [95.2, 13083.0], [95.3, 13188.0], [95.4, 13274.0], [95.5, 13359.0], [95.6, 13449.0], [95.7, 13571.0], [95.8, 13662.0], [95.9, 13769.0], [96.0, 13919.0], [96.1, 14013.0], [96.2, 14138.0], [96.3, 14274.0], [96.4, 14462.0], [96.5, 14639.0], [96.6, 14790.0], [96.7, 15011.0], [96.8, 15228.0], [96.9, 15457.0], [97.0, 15715.0], [97.1, 15979.0], [97.2, 16212.0], [97.3, 16453.0], [97.4, 16963.0], [97.5, 17389.0], [97.6, 17637.0], [97.7, 17991.0], [97.8, 18416.0], [97.9, 19014.0], [98.0, 19576.0], [98.1, 20305.0], [98.2, 20993.0], [98.3, 21312.0], [98.4, 21692.0], [98.5, 22354.0], [98.6, 22989.0], [98.7, 23887.0], [98.8, 24634.0], [98.9, 25724.0], [99.0, 26823.0], [99.1, 28074.0], [99.2, 31199.0], [99.3, 36193.0], [99.4, 39314.0], [99.5, 42143.0], [99.6, 44989.0], [99.7, 48696.0], [99.8, 58194.0], [99.9, 77552.0], [100.0, 144864.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 188.0, "series": [{"data": [[144800.0, 1.0], [73100.0, 1.0], [125900.0, 1.0], [34900.0, 1.0], [36100.0, 1.0], [37300.0, 1.0], [36900.0, 1.0], [38100.0, 1.0], [40500.0, 1.0], [40100.0, 1.0], [39700.0, 1.0], [39300.0, 1.0], [42100.0, 1.0], [44900.0, 1.0], [43700.0, 2.0], [46900.0, 1.0], [46500.0, 1.0], [48100.0, 1.0], [49700.0, 1.0], [200.0, 1.0], [58100.0, 1.0], [300.0, 3.0], [77800.0, 1.0], [100200.0, 1.0], [400.0, 5.0], [500.0, 6.0], [600.0, 16.0], [700.0, 19.0], [800.0, 32.0], [900.0, 33.0], [1000.0, 39.0], [1100.0, 31.0], [1200.0, 60.0], [1300.0, 39.0], [1400.0, 51.0], [1500.0, 49.0], [1600.0, 69.0], [1700.0, 78.0], [1800.0, 62.0], [1900.0, 70.0], [2000.0, 82.0], [2100.0, 98.0], [2200.0, 90.0], [2300.0, 110.0], [2400.0, 113.0], [2500.0, 161.0], [2600.0, 146.0], [2700.0, 137.0], [2800.0, 141.0], [2900.0, 150.0], [3000.0, 174.0], [3100.0, 177.0], [3200.0, 159.0], [3300.0, 172.0], [3400.0, 160.0], [3500.0, 165.0], [3600.0, 187.0], [3700.0, 176.0], [3800.0, 184.0], [3900.0, 188.0], [4000.0, 169.0], [4100.0, 179.0], [4200.0, 177.0], [4300.0, 168.0], [4400.0, 167.0], [4500.0, 163.0], [4600.0, 179.0], [72100.0, 1.0], [4700.0, 156.0], [4800.0, 150.0], [4900.0, 140.0], [5000.0, 136.0], [5100.0, 147.0], [5200.0, 130.0], [5300.0, 142.0], [5500.0, 133.0], [5400.0, 153.0], [5600.0, 124.0], [5800.0, 113.0], [5700.0, 107.0], [6000.0, 103.0], [6100.0, 100.0], [5900.0, 122.0], [6300.0, 93.0], [6200.0, 95.0], [6400.0, 85.0], [6600.0, 78.0], [6500.0, 80.0], [6700.0, 80.0], [6800.0, 80.0], [6900.0, 80.0], [7000.0, 74.0], [7100.0, 54.0], [7400.0, 45.0], [7300.0, 56.0], [7200.0, 62.0], [7600.0, 54.0], [7500.0, 65.0], [7800.0, 58.0], [7900.0, 43.0], [7700.0, 50.0], [8000.0, 57.0], [8100.0, 44.0], [8200.0, 40.0], [8300.0, 43.0], [8500.0, 49.0], [8600.0, 41.0], [8700.0, 43.0], [8400.0, 35.0], [8800.0, 36.0], [8900.0, 35.0], [9100.0, 40.0], [9200.0, 34.0], [9000.0, 39.0], [9300.0, 28.0], [9400.0, 34.0], [9600.0, 29.0], [9700.0, 23.0], [9500.0, 25.0], [9800.0, 33.0], [9900.0, 30.0], [10000.0, 25.0], [10200.0, 28.0], [10100.0, 17.0], [10400.0, 20.0], [10300.0, 22.0], [10500.0, 10.0], [10600.0, 16.0], [10700.0, 25.0], [10800.0, 11.0], [10900.0, 22.0], [11000.0, 24.0], [11100.0, 15.0], [11200.0, 13.0], [11300.0, 15.0], [11600.0, 14.0], [11700.0, 7.0], [11500.0, 10.0], [11400.0, 17.0], [11900.0, 15.0], [12100.0, 13.0], [12200.0, 9.0], [11800.0, 13.0], [12000.0, 17.0], [12500.0, 12.0], [12600.0, 10.0], [12700.0, 14.0], [12400.0, 19.0], [12300.0, 16.0], [12800.0, 11.0], [13100.0, 8.0], [13300.0, 13.0], [12900.0, 13.0], [13000.0, 11.0], [13200.0, 10.0], [13600.0, 9.0], [13700.0, 8.0], [13800.0, 7.0], [13400.0, 9.0], [13500.0, 9.0], [14100.0, 7.0], [14200.0, 5.0], [14300.0, 7.0], [13900.0, 10.0], [14000.0, 9.0], [14700.0, 4.0], [14800.0, 5.0], [14500.0, 5.0], [14600.0, 8.0], [14400.0, 5.0], [15000.0, 6.0], [15300.0, 4.0], [14900.0, 3.0], [15200.0, 5.0], [15100.0, 5.0], [15500.0, 3.0], [15800.0, 6.0], [15400.0, 4.0], [15600.0, 2.0], [15700.0, 4.0], [16100.0, 5.0], [16200.0, 6.0], [16000.0, 3.0], [15900.0, 3.0], [16300.0, 1.0], [17000.0, 3.0], [17400.0, 4.0], [16400.0, 5.0], [17200.0, 4.0], [16800.0, 3.0], [18000.0, 3.0], [17600.0, 3.0], [18200.0, 2.0], [17800.0, 1.0], [18400.0, 3.0], [18800.0, 2.0], [19000.0, 2.0], [18600.0, 2.0], [19600.0, 2.0], [20000.0, 4.0], [20400.0, 2.0], [19800.0, 1.0], [21000.0, 3.0], [20800.0, 1.0], [21200.0, 1.0], [21400.0, 1.0], [21600.0, 1.0], [22400.0, 2.0], [22000.0, 2.0], [21800.0, 3.0], [22200.0, 1.0], [23200.0, 1.0], [23400.0, 1.0], [22800.0, 1.0], [24400.0, 1.0], [23800.0, 2.0], [24000.0, 2.0], [25200.0, 2.0], [24600.0, 2.0], [25800.0, 1.0], [26200.0, 2.0], [26000.0, 1.0], [25600.0, 1.0], [26400.0, 1.0], [26800.0, 1.0], [27800.0, 3.0], [28000.0, 1.0], [28200.0, 1.0], [29800.0, 1.0], [30000.0, 1.0], [31400.0, 1.0], [34400.0, 1.0], [33200.0, 1.0], [36400.0, 1.0], [38000.0, 1.0], [39200.0, 1.0], [45600.0, 1.0], [47200.0, 1.0], [48800.0, 1.0], [50000.0, 1.0], [60000.0, 1.0], [73600.0, 1.0], [71200.0, 1.0], [78400.0, 1.0], [74300.0, 1.0], [77500.0, 1.0], [79900.0, 1.0], [134600.0, 1.0], [33500.0, 1.0], [38700.0, 1.0], [39900.0, 1.0], [39500.0, 1.0], [42300.0, 1.0], [43100.0, 1.0], [43900.0, 1.0], [45900.0, 1.0], [46700.0, 1.0], [49900.0, 1.0], [51900.0, 2.0], [55900.0, 1.0], [59900.0, 1.0], [76600.0, 1.0], [90100.0, 1.0], [16900.0, 3.0], [16500.0, 1.0], [17300.0, 2.0], [16700.0, 2.0], [17500.0, 5.0], [17900.0, 4.0], [18100.0, 3.0], [17700.0, 2.0], [18300.0, 1.0], [19100.0, 5.0], [19300.0, 1.0], [18900.0, 1.0], [18500.0, 1.0], [18700.0, 1.0], [19500.0, 3.0], [20300.0, 3.0], [19700.0, 1.0], [20700.0, 4.0], [21500.0, 7.0], [21100.0, 4.0], [21300.0, 2.0], [20900.0, 1.0], [22300.0, 2.0], [22500.0, 2.0], [22100.0, 1.0], [21700.0, 2.0], [22900.0, 4.0], [23100.0, 2.0], [23300.0, 1.0], [24300.0, 2.0], [24500.0, 2.0], [23700.0, 2.0], [24100.0, 2.0], [24700.0, 1.0], [25500.0, 1.0], [24900.0, 2.0], [25300.0, 1.0], [26300.0, 1.0], [25700.0, 1.0], [26500.0, 1.0], [27100.0, 2.0], [27500.0, 1.0], [27300.0, 2.0], [26700.0, 1.0], [27900.0, 1.0], [28100.0, 1.0], [28300.0, 1.0], [29100.0, 1.0], [30700.0, 1.0], [30100.0, 1.0], [31100.0, 2.0], [31500.0, 2.0], [35000.0, 2.0], [38200.0, 1.0], [40600.0, 3.0], [42600.0, 1.0], [41400.0, 1.0], [44600.0, 1.0], [43800.0, 2.0], [48600.0, 2.0], [49800.0, 1.0], [52600.0, 1.0], [76400.0, 1.0], [79600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 144800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9302.0, "series": [{"data": [[0.0, 9.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 327.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9302.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 70.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.4128440366972477, "minX": 1.68304764E12, "maxY": 2.6999999999999997, "series": [{"data": [[1.68304782E12, 2.007227671657198], [1.68304764E12, 2.6999999999999997], [1.68304794E12, 1.9979560551865083], [1.68304776E12, 1.9984480082772866], [1.68304788E12, 1.998443175921124], [1.6830477E12, 2.0299727520435953], [1.683048E12, 1.4128440366972477]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.683048E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2179.0, "minX": 1.0, "maxY": 72197.0, "series": [{"data": [[2.0, 36193.0], [3.0, 38138.0], [4.0, 72197.0], [5.0, 22505.0], [6.0, 10339.0], [7.0, 16212.0], [8.0, 21545.0], [10.0, 39417.5], [11.0, 38004.0], [12.0, 9676.0], [13.0, 12588.0], [14.0, 7516.0], [15.0, 26823.0], [16.0, 49880.0], [17.0, 6439.0], [18.0, 21556.0], [19.0, 20010.0], [20.0, 18096.0], [21.0, 6373.0], [22.0, 7552.0], [23.0, 7482.0], [24.0, 4384.0], [25.0, 4623.0], [26.0, 10365.0], [27.0, 4453.0], [28.0, 4173.0], [29.0, 4742.0], [30.0, 2179.0], [31.0, 2763.0], [33.0, 4298.0], [32.0, 8533.0], [35.0, 3316.0], [34.0, 3945.5], [37.0, 3919.0], [36.0, 3087.5], [39.0, 4609.5], [38.0, 3268.0], [41.0, 6910.0], [40.0, 5397.0], [43.0, 6482.0], [42.0, 3055.0], [45.0, 4474.5], [44.0, 2618.0], [47.0, 4086.0], [46.0, 8136.0], [49.0, 6302.0], [48.0, 3049.0], [51.0, 3926.6666666666665], [50.0, 12298.999999999998], [53.0, 4886.0], [52.0, 4070.0], [55.0, 3502.0], [54.0, 4358.0], [57.0, 7635.0], [56.0, 7054.0], [59.0, 7956.0], [58.0, 10892.0], [61.0, 3347.0], [60.0, 4545.0], [63.0, 7246.0], [62.0, 4541.0], [67.0, 4271.666666666667], [66.0, 8510.5], [65.0, 4063.5], [64.0, 4565.0], [71.0, 5011.0], [70.0, 4386.0], [69.0, 5148.0], [68.0, 5275.5], [75.0, 26793.0], [74.0, 5479.8], [73.0, 5400.285714285715], [72.0, 6144.0], [79.0, 3347.666666666667], [77.0, 4529.0], [76.0, 11048.0], [83.0, 6399.666666666667], [82.0, 8726.0], [81.0, 4076.1111111111113], [80.0, 4026.3333333333335], [87.0, 3409.0], [86.0, 4881.0], [85.0, 5641.0], [84.0, 4738.0], [91.0, 6534.0], [90.0, 3743.0], [89.0, 5450.5], [88.0, 12157.0], [95.0, 5948.0], [94.0, 4685.0], [93.0, 7063.0], [92.0, 6379.5], [99.0, 8122.458333333336], [98.0, 6724.833333333333], [97.0, 5288.142857142858], [96.0, 3930.0], [100.0, 5893.316410364458], [1.0, 38729.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[99.2353728883398, 5938.430675731361]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 19.0, "minX": 1.68304764E12, "maxY": 6351019.483333333, "series": [{"data": [[1.68304782E12, 6286113.816666666], [1.68304764E12, 32452.833333333332], [1.68304794E12, 6351019.483333333], [1.68304776E12, 6273132.683333334], [1.68304788E12, 6253660.983333333], [1.6830477E12, 5754975.883333334], [1.683048E12, 353735.88333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68304782E12, 3680.3], [1.68304764E12, 19.0], [1.68304794E12, 3718.3], [1.68304776E12, 3672.7], [1.68304788E12, 3661.3], [1.6830477E12, 3486.5], [1.683048E12, 207.1]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.683048E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 803.5, "minX": 1.68304764E12, "maxY": 9779.458715596329, "series": [{"data": [[1.68304782E12, 5873.358802271562], [1.68304764E12, 803.5], [1.68304794E12, 5885.977516607053], [1.68304776E12, 5716.9772374547365], [1.68304788E12, 5956.799688635187], [1.6830477E12, 6076.87465940056], [1.683048E12, 9779.458715596329]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.683048E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 284.4, "minX": 1.68304764E12, "maxY": 966.5754768392386, "series": [{"data": [[1.68304782E12, 515.5797625193586], [1.68304764E12, 284.4], [1.68304794E12, 517.30608073582], [1.68304776E12, 556.5737196068277], [1.68304788E12, 497.8526206538663], [1.6830477E12, 966.5754768392386], [1.683048E12, 651.9174311926606]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.683048E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 41.3, "minX": 1.68304764E12, "maxY": 433.9633027522935, "series": [{"data": [[1.68304782E12, 323.8084667010836], [1.68304764E12, 41.3], [1.68304794E12, 336.6535513541136], [1.68304776E12, 359.01293326435547], [1.68304788E12, 318.96938245978214], [1.6830477E12, 315.72043596730254], [1.683048E12, 433.9633027522935]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.683048E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 282.0, "minX": 1.68304764E12, "maxY": 144864.0, "series": [{"data": [[1.68304782E12, 134606.0], [1.68304764E12, 1374.0], [1.68304794E12, 79949.0], [1.68304776E12, 90177.0], [1.68304788E12, 144864.0], [1.6830477E12, 60056.0], [1.683048E12, 77552.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68304782E12, 393.0], [1.68304764E12, 282.0], [1.68304794E12, 451.0], [1.68304776E12, 379.0], [1.68304788E12, 513.0], [1.6830477E12, 491.0], [1.683048E12, 1665.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68304782E12, 9443.400000000001], [1.68304764E12, 1363.2], [1.68304794E12, 10030.0], [1.68304776E12, 9469.2], [1.68304788E12, 9730.6], [1.6830477E12, 10951.800000000005], [1.683048E12, 22505.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68304782E12, 37653.539999999535], [1.68304764E12, 1374.0], [1.68304794E12, 23624.560000000052], [1.68304776E12, 23365.84000000002], [1.68304788E12, 25708.32], [1.6830477E12, 27386.839999999986], [1.683048E12, 77016.50000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68304782E12, 4596.0], [1.68304764E12, 733.0], [1.68304794E12, 4775.0], [1.68304776E12, 4736.0], [1.68304788E12, 4724.0], [1.6830477E12, 4847.0], [1.683048E12, 4938.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.68304782E12, 12345.3], [1.68304764E12, 1374.0], [1.68304794E12, 12598.8], [1.68304776E12, 12485.099999999999], [1.68304788E12, 12809.799999999996], [1.6830477E12, 13943.599999999982], [1.683048E12, 38465.5]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.683048E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1190.0, "minX": 1.0, "maxY": 37165.5, "series": [{"data": [[2.0, 37165.5], [4.0, 11000.0], [6.0, 1190.0], [7.0, 5520.0], [11.0, 4094.0], [12.0, 5821.0], [14.0, 7126.5], [15.0, 4634.0], [16.0, 4973.0], [17.0, 4687.5], [18.0, 4506.0], [19.0, 4247.0], [20.0, 6555.0], [21.0, 4433.5], [22.0, 4309.0], [23.0, 5365.0], [24.0, 5026.5], [25.0, 5002.0], [26.0, 4678.5], [27.0, 5077.0], [28.0, 4669.5], [29.0, 4979.5], [30.0, 4480.0], [31.0, 4612.5], [33.0, 4681.0], [32.0, 4470.5], [35.0, 4676.5], [34.0, 4533.5], [36.0, 4865.0], [37.0, 5022.0], [38.0, 4747.0], [39.0, 4969.0], [40.0, 4740.5], [41.0, 4731.5], [42.0, 4822.5], [43.0, 4508.0], [45.0, 4914.0], [44.0, 4643.5], [47.0, 4999.0], [46.0, 4010.5], [48.0, 4830.5], [49.0, 5398.0], [51.0, 6268.0], [50.0, 4907.5], [56.0, 3983.0], [58.0, 3234.0], [63.0, 4295.0], [84.0, 4308.0], [1.0, 22505.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 4836.0], [33.0, 7817.0], [35.0, 11232.0], [18.0, 6662.0], [19.0, 12841.0], [22.0, 1817.0], [47.0, 8824.0], [51.0, 10078.0], [56.0, 3521.0], [7.0, 5499.0], [58.0, 2871.0], [29.0, 11623.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 84.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 156.0, "minX": 1.0, "maxY": 10520.0, "series": [{"data": [[2.0, 172.0], [4.0, 219.0], [6.0, 279.5], [7.0, 1199.0], [11.0, 156.0], [12.0, 360.5], [14.0, 232.5], [15.0, 275.0], [16.0, 1310.0], [17.0, 230.5], [18.0, 543.0], [19.0, 261.0], [20.0, 241.0], [21.0, 187.0], [22.0, 183.0], [23.0, 177.0], [24.0, 203.0], [25.0, 211.0], [26.0, 200.0], [27.0, 227.0], [28.0, 210.0], [29.0, 216.0], [30.0, 181.5], [31.0, 201.0], [33.0, 215.5], [32.0, 210.5], [35.0, 188.5], [34.0, 209.0], [36.0, 202.0], [37.0, 211.0], [38.0, 192.0], [39.0, 228.0], [40.0, 188.0], [41.0, 210.5], [42.0, 212.5], [43.0, 212.0], [45.0, 219.0], [44.0, 178.0], [47.0, 528.0], [46.0, 184.0], [48.0, 177.0], [49.0, 229.0], [51.0, 1238.0], [50.0, 206.5], [56.0, 531.0], [58.0, 872.0], [63.0, 248.0], [84.0, 298.5], [1.0, 236.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 4419.0], [33.0, 4674.0], [35.0, 10520.0], [18.0, 3501.0], [19.0, 2799.0], [22.0, 1618.0], [47.0, 8254.0], [51.0, 6439.0], [56.0, 3128.0], [7.0, 4126.5], [58.0, 2710.0], [29.0, 4370.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 84.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.05, "minX": 1.68304764E12, "maxY": 32.25, "series": [{"data": [[1.68304782E12, 32.05], [1.68304764E12, 5.05], [1.68304794E12, 31.4], [1.68304776E12, 32.25], [1.68304788E12, 32.05], [1.6830477E12, 29.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68304794E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.68304764E12, "maxY": 32.61666666666667, "series": [{"data": [[1.68304782E12, 32.28333333333333], [1.68304764E12, 0.16666666666666666], [1.68304794E12, 32.61666666666667], [1.68304776E12, 32.21666666666667], [1.68304788E12, 32.11666666666667], [1.6830477E12, 29.416666666666668], [1.683048E12, 1.8166666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6830477E12, 1.1666666666666667]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.683048E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.68304764E12, "maxY": 32.61666666666667, "series": [{"data": [[1.68304782E12, 32.28333333333333], [1.68304764E12, 0.16666666666666666], [1.68304794E12, 32.61666666666667], [1.68304776E12, 32.21666666666667], [1.68304788E12, 32.11666666666667], [1.6830477E12, 29.416666666666668], [1.683048E12, 1.8166666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6830477E12, 1.1666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.683048E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.68304764E12, "maxY": 32.61666666666667, "series": [{"data": [[1.68304782E12, 32.28333333333333], [1.68304764E12, 0.16666666666666666], [1.68304794E12, 32.61666666666667], [1.68304776E12, 32.21666666666667], [1.68304788E12, 32.11666666666667], [1.6830477E12, 29.416666666666668], [1.683048E12, 1.8166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6830477E12, 1.1666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.683048E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

